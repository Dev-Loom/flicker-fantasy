<!DOCTYPE html>
<html>

<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>Admin</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/boxicons@latest/css/boxicons.min.css">
    <style>
        .note-text {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #f4cccc;
            border-radius: 5px;
            background-color: #fff5f5;
        }

        .note-red {
            font-size: 14px;
            color: #d8000c;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .note-content {
            font-size: 12px;
            color: #d8000c;
        }

        .upload-btn-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
            margin-bottom: 20px;
        }

        .btn {
            border: 2px solid;
            background-color: white;
            padding: 8px 20px;
            border-radius: 8px;
            font-size: 18px;
            font-weight: bold;
        }

        .upload-btn-wrapper input[type="file"] {
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
        }

        .confirmation-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .confirmation-content {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
        }

        .confirmation-buttons {
            margin-top: 10px;
        }

        .confirmation-buttons button {
            margin: 0 10px;
            padding: 5px 10px;
            border: none;
            cursor: pointer;
        }

        .confirmation-buttons button.confirm {
            background-color: red;
            color: white;
        }



        @import url("https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap");

        :root {
            --header-height: 3rem;
            --nav-width: 68px;
            --first-color: #4723D9;
            --first-color-light: #AFA5D9;
            --white-color: #F7F6FB;
            --body-font: 'Nunito', sans-serif;
            --normal-font-size: 1rem;
            --z-fixed: 100
        }

        *,
        ::before,
        ::after {
            box-sizing: border-box
        }

        body {
            position: relative;
            margin: var(--header-height) 0 0 0;
            padding: 0 1rem;
            font-family: var(--body-font);
            font-size: var(--normal-font-size);
            transition: .5s
        }

        a {
            text-decoration: none
        }

        .header {
            width: 100%;
            height: var(--header-height);
            position: fixed;
            top: 0;
            left: 0;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 1rem;
            background-color: var(--white-color);
            z-index: var(--z-fixed);
            transition: .5s
        }

        .header_toggle {
            color: var(--first-color);
            font-size: 1.5rem;
            cursor: pointer
        }

        .header_img {
            width: 35px;
            height: 35px;
            display: flex;
            justify-content: center;
            border-radius: 50%;
            overflow: hidden
        }

        .header_img img {
            width: 40px
        }

        .l-navbar {
            position: fixed;
            top: 0;
            left: -30%;
            width: var(--nav-width);
            height: 100vh;
            background-color: var(--first-color);
            padding: .5rem 1rem 0 0;
            transition: .5s;
            z-index: var(--z-fixed)
        }

        .nav {
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            overflow: hidden
        }

        .nav_logo,
        .nav_link {
            display: grid;
            grid-template-columns: max-content max-content;
            align-items: center;
            column-gap: 1rem;
            padding: .5rem 0 .5rem 1.5rem
        }

        .nav_logo {
            margin-bottom: 2rem
        }

        .nav_logo-icon {
            font-size: 1.25rem;
            color: var(--white-color)
        }

        .nav_logo-name {
            color: var(--white-color);
            font-weight: 700
        }

        .nav_link {
            position: relative;
            color: var(--first-color-light);
            margin-bottom: 1.5rem;
            transition: .3s
        }

        .nav_link:hover {
            color: var(--white-color)
        }

        .nav_icon {
            font-size: 1.25rem
        }

        .show {
            left: 0
        }

        .body-pd {
            padding-left: calc(var(--nav-width) + 1rem)
        }

        .active {
            color: var(--white-color)
        }

        .active::before {
            content: '';
            position: absolute;
            left: 0;
            width: 2px;
            height: 32px;
            background-color: var(--white-color)
        }

        .height-100 {
            height: 100vh
        }

        @media screen and (max-width: 768px) {
            .header {
                padding: 0 1rem;
            }

            .l-navbar {
                padding: 1rem 1rem 0 0;
            }

            body {
                padding: calc(var(--header-height) + 1rem);
            }

            .input-group {
                width: 100%;
            }
        }

        .slot-button {
            display: inline-block;
            padding: 8px 16px;
            margin-right: 10px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            background-color: #f5f5f5;
            color: #333;
            transition: background-color 0.3s, color 0.3s;
        }

        .slot-button:hover {
            background-color: #333;
            color: #fff;
        }

        #bookingForm {
            background-color: #ffffff;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 8px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        #bookingForm h1 {
            font-family: 'Nunito', sans-serif;
            font-weight: 400;
            text-align: center;
            margin-bottom: 20px;
        }

        #bookingForm label {
            font-family: 'Nunito', sans-serif;
            font-weight: 600;
        }

        #bookingForm select,
        #bookingForm input[type="date"],
        #bookingForm input[type="text"],
        #bookingForm input[type="tel"],
        #bookingForm input[type="email"],
        #bookingForm input[type="number"],
        #bookingForm button[type="submit"] {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-family: 'Nunito', sans-serif;
            font-size: 16px;
        }

        #bookingForm button[type="submit"] {
            background-color: #4723D9;
            color: #ffffff;
            cursor: pointer;
        }
    </style>
</head>

<body>

    <body id="body-pd">
        <header class="header" id="header">
            <div class="header_toggle"> <i class='bx bx-menu' id="header-toggle"></i> </div>

        </header>
        <div class="l-navbar" id="nav-bar">
            <nav class="nav">
                <div>
                    <div class="nav_list"> <a href="/admin/dashboard" class="nav_link"> <i
                                class='bx bx-grid-alt nav_icon'></i>
                            <span class="nav_name">Dashboard</span> </a><a href="/admin/upload" class="nav_link ">
                            <i class='bx bx-image-add nav_icon'></i> <span class="nav_name">Upload Pictures</span> </a>
                        <a href="/admin/booking" class="nav_link active"> <i
                                class='bx bx-book-content nav_icon'></i></i>
                            <span class="nav_name">Manual
                                Booking</span> </a>
                    </div>
                </div> <a id="logout" class="nav_link"> <i class='bx bx-log-out nav_icon'></i> <span
                        class="nav_name">SignOut</span>
                </a>
            </nav>
        </div>
        <br>
        <h1 style="text-align: center;font-weight: 400; font-family: Nunito" ,sans-serif; ">Book Now</h1>

        <div class=" container mt-5" style="max-width: 50%;">

            <form id="bookingForm">
                <div class="mb-3">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="theaterSelect" class="form-label">Select Theater:</label>
                            <select class="form-select" id="theaterSelect" required>
                                <option value="0">one Theater</option>
                                <option value="1">Standard Theater</option>
                                <option value="2">Couples Theater</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="datePicker" class="form-label">Select Date:</label>
                            <input type="date" class="form-control" id="datePicker" required disabled>
                        </div>
                    </div>
                </div>
                <div id="slotContainer" style="margin-left: 2rem;" class="mt-3"></div>
                <div id="userDetails"></div>

            </form>

            <div class=" confirmation-modal" id="confirmationModal">
                <div class="confirmation-content">
                    <p>Are you sure you want to delete this image?</p>
                    <div class="confirmation-buttons">
                        <button class="confirm" id="confirmDelete">Yes</button>
                        <button id="cancelDelete">Cancel</button>
                    </div>
                </div>
            </div>
            <div class="confirmation-modal" id="logoutConfirmationModal">
                <div class="confirmation-content">
                    <p>Are you sure you want to log out?</p>
                    <div class="confirmation-buttons">
                        <button class="confirm" id="confirmLogout">Yes</button>
                        <button id="cancelLogout">Cancel</button>
                    </div>
                </div>
            </div>

            <script>
                const theaterSelect = document.getElementById('theaterSelect');
                const datePicker = document.getElementById('datePicker');
                const slotContainer = document.getElementById("slotContainer");
                const modalBody = document.getElementById("userDetails");
                // Get current date for minimum date in the date picker
                const currentDate = new Date().toISOString().split('T')[0];
                datePicker.setAttribute('min', currentDate);

                // Simulate available theater

                // Enable date picker when theater is selected
                theaterSelect.addEventListener('change', () => {
                    datePicker.disabled = false;
                });
                const slotSelect = document.getElementById('slotSelect');
                async function fetchSlots(selectedDate, theaterId) {
                    try {
                        const response = await fetch(`/theater/getSlotInfo`, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify({
                                theaterId, // Replace with the actual theater ID
                                dateValue: selectedDate,
                            }),
                        });

                        if (!response.ok) {
                            throw new Error(`API Request Error: ${response.statusText}`);
                        }

                        const responseData = await response.json();
                        updateSlotDisplay(selectedDate, responseData.data, theaterId);

                    } catch (error) {
                        console.error('Error fetching slots:', error);
                    }
                }
                datePicker.addEventListener('change', () => {
                    const selectedDate = formatDateFromISOToDMY(datePicker.value);
                    const theaterId = theaterSelect.value
                    if (selectedDate && theaterId) {
                        fetchSlots(selectedDate, theaterId);
                    }
                });
                function updateSlotDisplay(selectedDate, slotsData, theaterId) {
                    slotContainer.innerHTML = "";

                    // if (slotsData.length === 0) {

                    // } else {

                    const availableSlots = slotsData.filter((slot) => !slot.booked);
                    if (availableSlots.length) {
                        const slotsAvailableMessage = document.createElement("h6");
                        slotsAvailableMessage.textContent = "Slots Available :";
                        slotContainer.style.marginLeft = "2rem";
                        slotContainer.appendChild(slotsAvailableMessage);
                        availableSlots.forEach((slot) => {
                            const slotButton = document.createElement("button");
                            slotButton.className = "slot-button";
                            slotButton.innerHTML = slot.value;
                            slotButton.name = "slot";
                            slotButton.onclick = function () {
                                openBookingForm(selectedDate, slot.value, slot.id, theaterId);
                            };
                            slotContainer.appendChild(slotButton);
                        });
                    } else {
                        const noSlotsMessage = document.createElement("h5");
                        noSlotsMessage.textContent = "No slots available";
                        slotContainer.style.marginLeft = "0";
                        slotContainer.appendChild(noSlotsMessage);
                    }
                }

                function openBookingForm(slotDate, slotTime, slotId, theaterId) {
                    theaterSelect.disabled = true;
                    datePicker.disabled = true;
                    slotContainer.classList.add("disabled");
                    modalBody.innerHTML = `
    <br/>
    
      <h5 style="text-align: center;"><strong>Date: ${slotDate} & Time: ${slotTime}</strong></h5>
      <br/>
      <input type="hidden" value="${slotDate}" name="date" id="date">
      <input type="hidden" value="${slotId}" name="slot" id="slot">
      <input type="hidden" value="${theaterId}" name="theater" id="theater">

<div class="mb-3">
  <label for="name" class="form-label">Name</label>
  <input type="text" name="name" class="form-control" id="name" required>
</div>

<div class="mb-3">
  <label for="whatsapp" class="form-label">WhatsApp Number</label>
  <input name="whatsapp" type="tel" class="form-control" id="whatsapp" pattern="[0-9]{10}" placeholder="10-digit number" required>
</div>

<div class="mb-3">
  <label for="email" class="form-label">Email</label>
  <input type="email" name="email" class="form-control" id="email" required>
</div>

<div class="mb-3">
  <label for="numberOfPeople" class="form-label">Number of People</label>
  <input type="number" name="count" class="form-control" id="numberOfPeople" min="1" max="6" required>
</div>

<div class="mb-3">
  <label for="cake" class="form-label">Cake</label>
  <select name="cake" class="form-select" id="cake">
    <option value="" selected>Not Required</option>
    <option value="blackForest">Black Forest - ₹500</option>
    <option value="butterScotch">Butter Scotch - ₹500</option>
    <option value="chocolate">Chocolate - ₹500</option>
    <option value="pineApple">Pine Apple - ₹500</option>
    <option value="roundRedVelvet">Round Red Velvet - ₹600</option>
    <option value="buleBerry">Blueberry - ₹600</option>
    <option value="mangoCake">Mango Cake - ₹600</option>
    <option value="heartRedVelvet">Heart Red Velvet - ₹600</option>
    <option value="deathByChocolate">Death By Chocolate - ₹700</option>
    <option value="chocoAlmond">Choco Almond - ₹750</option>
    <option value="heartPinata">Heart Pinata - ₹850</option>
  </select>
</div>

<div class="mb-3">
  <label for="decoration" class="form-label">Decoration</label>
  <select name="decoration" class="form-select" id="decoration">
  <option value="" selected>Not Required</option>
  <optgroup label="Regular Decoration - ₹300">
      <option value="Birthday">Birthday</option>
      <option value="Anniversary">Anniversary</option>
      <option value="Romantic Date">Romantic Date</option>
      <option value="Marriage Proposal">Marriage Proposal</option>
      <option value="Bride To Be">Bride To Be</option>
      <option value="Farewell">Farewell</option>
      <option value="Congratulations">Congratulations</option>
      <option value="Baby Shower">Baby Shower</option>
  </optgroup>
  <optgroup label="Advanced Decoration - ₹500">
      <option value="Birthday-Advance">Birthday - Advanced</option>
      <option value="Anniversary-Advance">Anniversary - Advanced</option>
      <option value="Romantic Date-Advance">Romantic Date - Advanced</option>
      <option value="Marriage Proposal-Advance">Marriage Proposal - Advanced</option>
      <option value="Bride To Be-Advance">Bride To Be - Advanced</option>
      <option value="Farewell-Advance">Farewell - Advanced</option>
      <option value="Congratulations-Advance">Congratulations - Advanced</option>
      <option value="Baby Shower-Advance">Baby Shower - Advanced</option>
  </optgroup>
</select>
</div>
<button type="submit" class="btn btn-primary">Check Price</button>
<div class="note-text">
    <p class="note-red">Please note:</p>
    <p class="note-content">
      Final amount will consist of Booking fee + 2.5% platform fees
    </p>
  </div>
<br>
<br>
<br>
<div class="mb-3 text-center">
<button id="payButton" style="display: none; background-color: green" class="btn btn-primary"></button>
<div id="priceInfo" class="mb-3"></div>
</div>




    `;

                    // Show the modal
                    // const datePickerModal = new bootstrap.Modal(document.getElementById("datePickerModal"));
                    // datePickerModal.show();

                    // Handle form submission
                    const userDetailsForm = document.getElementById("bookingForm");
                    userDetailsForm.addEventListener("submit", async function (event) {
                        event.preventDefault();
                        const response = await calculatePrice();
                        if (!response.ok) {
                            throw new Error(`API Request Error: ${response.statusText}`);
                        }

                        const responseData = await response.json();
                        const amount = responseData.amount;

                        // Display the calculated price
                        const priceInfo = document.getElementById("priceInfo");

                        // Show the "Book Now" button with the price
                        const payButton = document.getElementById("payButton");
                        payButton.style.display = "inline";
                        payButton.innerHTML = `Book Now (₹${amount})`;

                        payButton.addEventListener("click", async () => {
                            // Make the API call here
                            try {
                                const response = await fetch("/admin/booking", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                    },
                                    body: JSON.stringify({
                                        userInfo: responseData,
                                    }),
                                });

                                if (!response.ok) {
                                    throw new Error("API Request Error");
                                }

                                alert("Booking successful!");

                                window.location.href = `/admin/booking`
                            } catch (error) {
                                console.error("Error booking:", error);
                                // Show an error toast message
                                toastr.error("Booking failed. Please try again later.");
                            }
                        });

                    });
                    const cakeDropdown = document.getElementById("cake");
                    const decorationDropdown = document.getElementById("decoration");

                    cakeDropdown.addEventListener("change", changePayButtonPrice);
                    decorationDropdown.addEventListener("change", changePayButtonPrice);
                }
                const calculatePrice = async () => {

                    const theaterid = document.getElementById("theater").value;
                    const date = document.getElementById("date").value;
                    const slot = document.getElementById("slot").value;
                    const name = document.getElementById("name").value;
                    const whatsapp = document.getElementById("whatsapp").value;
                    const email = document.getElementById("email").value;
                    const count = document.getElementById("numberOfPeople").value;
                    const decoration = document.getElementById("decoration").value;
                    const cake = document.getElementById("cake").value;

                    const response = await fetch(`/calculate`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            date,
                            slot,
                            name,
                            whatsapp,
                            email,
                            count,
                            decoration,
                            cake,
                            theaterid,
                        }),
                    });
                    return response;
                };

                const changePayButtonPrice = async () => {
                    const payButton = document.getElementById("payButton");
                    payButton.style.display = "none";
                };
                function formatDateFromISOToDMY(isoDate) {
                    const parts = isoDate.split("-");
                    if (parts.length !== 3) {
                        throw new Error("Invalid ISO date format");
                    }

                    const year = parts[0];
                    const month = parts[1];
                    const day = parts[2];

                    return `${day}/${month}/${year}`;
                }
            </script>
            <script>
                const logoutButton = document.getElementById("logout");
                const logoutConfirmationModal = document.getElementById("logoutConfirmationModal");
                const confirmLogoutButton = document.getElementById("confirmLogout");
                const cancelLogoutButton = document.getElementById("cancelLogout");

                // Event listener for Log Out button
                logoutButton.addEventListener("click", () => {
                    logoutConfirmationModal.style.display = "flex"; // Display the modal
                });

                // Event listener for confirm Log Out button
                confirmLogoutButton.addEventListener("click", () => {
                    // Redirect the user to the logout URL
                    window.location.href = "/admin/logout"; // Replace with the actual logout URL
                });

                // Event listener for cancel Log Out button
                cancelLogoutButton.addEventListener("click", () => {
                    logoutConfirmationModal.style.display = "none"; // Hide the modal
                });
            </script>
            <script>
                document.addEventListener("DOMContentLoaded", function (event) {
                    const showNavbar = (toggleId, navId, bodyId, headerId) => {
                        const toggle = document.getElementById(toggleId),
                            nav = document.getElementById(navId),
                            bodypd = document.getElementById(bodyId),
                            headerpd = document.getElementById(headerId)

                        // Validate that all variables exist
                        if (toggle && nav && bodypd && headerpd) {
                            toggle.addEventListener('click', () => {
                                // show navbar
                                nav.classList.toggle('show')
                                // change icon
                                toggle.classList.toggle('bx-x')
                                // add padding to body
                                bodypd.classList.toggle('body-pd')
                                // add padding to header
                                headerpd.classList.toggle('body-pd')
                            })
                        }
                    }

                    showNavbar('header-toggle', 'nav-bar', 'body-pd', 'header')

                    /*===== LINK ACTIVE =====*/
                    const linkColor = document.querySelectorAll('.nav_link')

                    function colorLink() {
                        if (linkColor) {
                            linkColor.forEach(l => l.classList.remove('active'))
                            this.classList.add('active')
                        }
                    }
                    linkColor.forEach(l => l.addEventListener('click', colorLink))

                });
            </script>
    </body>

</html>